// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sabotage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from sabotage.proto</summary>
public static partial class SabotageReflection {

  #region Descriptor
  /// <summary>File descriptor for sabotage.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SabotageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5zYWJvdGFnZS5wcm90byJNCghTYWJvdGFnZRIRCglwbGF5ZXJfaWQYASAB",
          "KAkSDwoHdGVhbV9pZBgCIAEoCRINCgVzY29yZRgDIAEoBRIOCgZzaWduZWQY",
          "BCABKAliBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Sabotage), global::Sabotage.Parser, new[]{ "PlayerId", "TeamId", "Score", "Signed" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Sabotage : pb::IMessage<Sabotage> {
  private static readonly pb::MessageParser<Sabotage> _parser = new pb::MessageParser<Sabotage>(() => new Sabotage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Sabotage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SabotageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Sabotage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Sabotage(Sabotage other) : this() {
    playerId_ = other.playerId_;
    teamId_ = other.teamId_;
    score_ = other.score_;
    signed_ = other.signed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Sabotage Clone() {
    return new Sabotage(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private string playerId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerId {
    get { return playerId_; }
    set {
      playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "team_id" field.</summary>
  public const int TeamIdFieldNumber = 2;
  private string teamId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TeamId {
    get { return teamId_; }
    set {
      teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 3;
  private int score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "signed" field.</summary>
  public const int SignedFieldNumber = 4;
  private string signed_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Signed {
    get { return signed_; }
    set {
      signed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Sabotage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Sabotage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TeamId != other.TeamId) return false;
    if (Score != other.Score) return false;
    if (Signed != other.Signed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
    if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    if (Signed.Length != 0) hash ^= Signed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerId);
    }
    if (TeamId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TeamId);
    }
    if (Score != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Score);
    }
    if (Signed.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Signed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
    }
    if (TeamId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    if (Signed.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Signed);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Sabotage other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId.Length != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TeamId.Length != 0) {
      TeamId = other.TeamId;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    if (other.Signed.Length != 0) {
      Signed = other.Signed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerId = input.ReadString();
          break;
        }
        case 18: {
          TeamId = input.ReadString();
          break;
        }
        case 24: {
          Score = input.ReadInt32();
          break;
        }
        case 34: {
          Signed = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
